/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */
/**/

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

#define DEFAULT 0
#define Movement 1
#define NumPad 2
#define Extra 3

/ {
    behaviors {
        // @TODO (undg) 2023-01-15: Investigate annoying ms wait/delay in tap dance.
        //                          I want it as follow -
        //                          hold: hold KEY1;
        //                          tap: press KEY2;
        //                          tap-tap: hold KEY2;
        tdbsp: tap_dance_bspc {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_0";
            #binding-cells = <0>;
            tapping-term-ms = <150>;
            bindings = <&mt LCTRL BSPC>, <&kp BSPC>;
        };
        tdenter: tap_dance_enter {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_1";
            #binding-cells = <0>;
            tapping-term-ms = <150>;
            bindings = <&mt RWIN ENTER>, <&kp ENTER>;
        };
        tddel: tap_dance_del {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_2";
            #binding-cells = <0>;
            tapping-term-ms = <150>;
            bindings = <&lt 1 DEL>, <&kp DEL>;
        };
    };
    // https://zmk.dev/docs/codes
    keymap {
        compatible = "zmk,keymap";

        def {
            bindings = <
&kp ESC        &kp N1        &kp N2        &kp N3        &kp N4        &kp N5        &lt 3 BACKSLASH        &lt 3 GRAVE     &kp N6        &kp N7        &kp N8        &kp N9          &kp N0         &kp EQUAL
&kp TAB        &kp Q         &kp W         &kp E         &kp R         &kp T         &kp LBKT               &kp RBKT        &kp Y         &kp U         &kp I         &kp O           &kp P          &kp MINUS
&kp ESC        &kp A         &kp S         &kp D         &kp F         &kp G         &kp LBRC               &kp RBRC        &kp H         &kp J         &kp K         &kp L           &kp SEMI       &kp APOS
&mt LSHFT LPAR &kp Z         &kp X         &kp C         &kp V         &kp B                                                &kp N         &kp M         &kp COMMA     &kp DOT         &kp SLASH      &mt LSHFT RPAR
&mt RALT F12   &kp F11       &kp F3        &kp F2                                                                                                       &kp F4        &kp F5          &kp F9         &kp F10
                                                                &mt RWIN ENTER  &kp SPACE                        &kp SPACE      &mt RWIN ENTER
                                                                &lt 1 DEL       &mt LCTRL BSPC                   &mt LCTRL BSPC &lt 1 DEL
                                                                &kp RALT        &lt 2 BSPC                       &lt 2 BSPC     &kp RALT
            >;
        };

        move {
           bindings = <
&trans         &kp F1        &kp F2        &kp F3        &kp F4        &kp F5        &trans                 &kp PRINTSCREEN &kp F6        &kp F7        &kp F8        &kp F9          &kp F10        &kp F11
&trans         &trans        &trans        &kp UP        &kp HOME      &trans        &trans                 &trans          &trans        &trans        &trans        &trans          &trans         &trans
&trans         &trans        &kp LEFT      &kp DOWN      &kp RIGHT     &kp PG_UP     &trans                 &trans          &kp LEFT      &kp DOWN      &kp UP        &kp RIGHT       &trans         &trans
&trans         &trans        &trans        &trans        &kp END       &kp PG_DN                                            &trans        &trans        &trans        &trans          &trans         &trans
&kp C_PLAY     &kp C_PAUSE   &kp C_PREV    &kp C_NEXT                                                                                                   &kp C_BRI_DEC &kp C_BRI_INC   &kp C_VOL_DN   &kp C_VOL_UP
                                                                &trans         &trans                            &trans         &trans
                                                                &trans         &kp BSPC                          &kp BSPC       &trans
                                                                &trans         &trans                            &trans         &trans
            >;
        };

        num {
           bindings = <
&trans         &trans        &trans        &trans        &trans        &trans        &trans                 &kp E           &kp F         &kp TAB       &kp SLASH     &kp STAR        &kp BSPC       &trans
&trans         &trans        &trans        &trans        &trans        &trans        &trans                 &kp C           &kp D         &kp N7        &kp N8        &kp N9          &kp MINUS      &trans
&trans         &trans        &trans        &trans        &trans        &trans        &trans                 &kp A           &kp B         &kp N4        &kp N5        &kp N6          &kp PLUS       &trans
&trans         &trans        &trans        &trans        &trans        &trans                                               &kp N0        &kp N1        &kp N2        &kp N3          &kp EQUAL      &trans
&trans         &trans        &trans        &trans                                                                                                       &kp N0        &kp DOT         &kp COMMA      &trans
                                                                &trans         &trans                            &trans         &trans
                                                                &trans         &trans                            &trans         &trans
                                                                &trans         &trans                            &trans         &trans
            >;
        };

        bt {
           bindings = <
&none          &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4  &trans                 &trans          &none         &none         &none         &none           &none          &bt BT_CLR
&none          &none         &none         &none         &none         &none         &none                  &none           &none         &none         &none         &none           &none          &none
&none          &none         &none         &none         &none         &none         &none                  &none           &none         &none         &none         &none           &none          &none
&none          &none         &none         &none         &none         &none                                                &none         &none         &none         &none           &none          &none
&bt BT_CLR     &none         &none         &bt BT_CLR_ALL                                                                                               &none         &none           &none          &none
                                                                &none          &none                             &none          &none
                                                                &none          &none                             &none          &none
                                                                &none          &none                             &none          &none
            >;

        };
    };
};
// vim: nofoldenable ft=c

